
import { saveAs } from "file-saver";
import jsPDF from "jspdf";
import QRCode from "qrcode";

interface EventTicket {
  id: string;
  ticket_code: string;
  event: {
    title: string;
    date: string;
    location: string;
    organizer: string;
  };
}

export async function generateTicketPDF(ticket: EventTicket, attendeeName: string) {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: "landscape",
    unit: "mm",
    format: "a5"
  });

  // Set background color for header
  doc.setFillColor(128, 90, 213); // event-purple color
  doc.rect(0, 0, doc.internal.pageSize.getWidth(), 25, "F");

  // Add title
  doc.setFontSize(24);
  doc.setTextColor(255, 255, 255);
  doc.text("EVENT TICKET", 10, 16);

  doc.setFontSize(12);
  doc.setTextColor(255, 255, 255);
  doc.text("Powered by Eventro", doc.internal.pageSize.getWidth() - 10, 16, { align: 'right' });

  // Add event info
  doc.setFontSize(22);
  doc.setTextColor(0, 0, 0);
  doc.text(ticket.event.title, 10, 35);

  // Add ticket code with background
  doc.setFillColor(235, 235, 255);
  doc.rect(10, 40, 80, 12, "F");
  doc.setFontSize(12);
  doc.setTextColor(128, 90, 213);
  doc.text(`Ticket #: ${ticket.ticket_code}`, 12, 47);

  // Add date
  doc.setTextColor(0, 0, 0);
  const eventDate = new Date(ticket.event.date);
  doc.setFontSize(12);
  doc.text("Date:", 10, 60);
  doc.setFontSize(14);
  doc.text(
    `${eventDate.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,
    10, 66
  );

  doc.setFontSize(12);
  doc.text("Time:", 10, 74);
  doc.setFontSize(14);
  doc.text(
    `${eventDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`,
    10, 80
  );

  // Add location
  doc.setFontSize(12);
  doc.text("Location:", 10, 88);
  doc.setFontSize(14);
  doc.text(`${ticket.event.location}`, 10, 94);

  // Add organizer
  doc.setFontSize(12);
  doc.text("Organized by:", 10, 102);
  doc.setFontSize(14);
  doc.text(`${ticket.event.organizer}`, 10, 108);

  // Add attendee with background
  doc.setFillColor(235, 235, 255);
  doc.rect(10, 114, 80, 12, "F");
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text(`Attendee: ${attendeeName}`, 12, 121);

  // Generate QR code with structured JSON data
  const qrData = JSON.stringify({
    ticket_code: ticket.ticket_code,
    ticket_id: ticket.id,
    event_title: ticket.event.title
  });
  console.log("Creating QR code with data:", qrData);

  try {
    // Generate QR code as data URL
    const qrCodeDataUrl = await QRCode.toDataURL(qrData, {
      width: 150,
      margin: 1,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    // Add QR code
    doc.addImage(qrCodeDataUrl, 'PNG', 140, 35, 40, 40);
    doc.setFontSize(10);
    doc.text("Scan for check-in", 160, 80, { align: 'center' });

    // Add decorative elements
    doc.setDrawColor(128, 90, 213); // Purple color
    doc.setLineWidth(0.5);
    doc.line(10, 130, doc.internal.pageSize.getWidth() - 10, 130);

    // Add Eventro branding
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text("This ticket was generated by Eventro",
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: "center" });

    // Add footer
    doc.setFillColor(128, 90, 213); // event-purple color
    doc.rect(0, doc.internal.pageSize.getHeight() - 18, doc.internal.pageSize.getWidth(), 18, "F");
    doc.setFontSize(10);
    doc.setTextColor(255, 255, 255);
    doc.text("Important: This ticket is your proof of purchase. Please present it (printed or digital) at the venue.",
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 11,
      { align: "center" });
    doc.setFontSize(8);
    doc.text("Ticket ID: " + ticket.id,
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 7,
      { align: "center" });

  } catch (error) {
    console.error("Error generating QR code:", error);
    // Define margin locally within this scope to fix the TypeScript error
    const margin = 1;
    doc.text("QR Code Generation Failed", 160, 55, { align: "center" });
  }

  // Save the PDF
  const pdfBlob = doc.output("blob");
  saveAs(pdfBlob, `ticket-${ticket.event.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.pdf`);

  return pdfBlob;
}
